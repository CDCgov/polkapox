env {
    TMPDIR = "$HOME/tmp"
}
 
singularity {
  enabled = true
  autoMounts = true
  cacheDir = "$HOME/singularityIMG2"
}

profiles {
  rosalind {
    executor {
      name = 'sge'
      queueSize = 12
      pollInterval = '10sec'
      submitRateLimit = '2sec'
    }
    process {
      // Executor information
      executor = 'sge'
      //jobName = { "$task.name - $task.hash" }
      penv = 'smp'
      queue = { task.time <= 4.h ? 'short.q' : task.time > 7.day ? 'long.q' : 'all.q' }

      // Disable docker by default
      docker.enabled = false

      // Default resources - expected to be overwritten
      memory = '90.GB'
      cpus = 16
      time = '96.h'

      // Set h_vmem option for qsub submissions. +20 memory to h_vmem prevents memory allocation errors.
      clusterOptions = { "-l h_vmem=${(check_max((task.memory.toGiga())+20), 'memory').toString().replaceAll(/[\sB]/,'')}G" }

      // Error handling - increases resources on each retry. Try to ignore errors and continue if not in errors listed.
      errorStrategy = { task.exitStatus in [143,137,104,134,139,140,71,255] ? 'retry' : 'ignore' }
      maxRetries    = 3
      maxErrors     = '-1'
    }
  }
  sge {
    process {
      executor = 'sge'
      penv = 'smp'
      queue = 'all.q'
    }
 
    executor {
      queueSize = 96
    }
  }
   sgecannon {
     process {
       //beforeScript = 'source /etc/profile; module load singularity/3.5.3'
       beforeScript = 'source /scicomp/groups-pure/Projects/scbs_mpob/miniconda3.9/bin/activate /scicomp/groups-pure/Projects/scbs_mpob/miniconda3.9/envs/nextflow'
       executor = 'sge'
       penv = 'smp'
       queue = 'all.q,covid.q'
       //queue = 'covid.q@node61.hpc.biotech.cdc.gov'
     }
 
     executor {
       queueSize = 32
     }
   }
   sgeaspen {
     process {
       beforeScript = 'source /scicomp/groups-pure/Projects/scbs_mpob/miniconda3.9/bin/activate /scicomp/groups-pure/Projects/scbs_mpob/miniconda3.9/envs/nextflow'
       executor = 'sge'
       penv = 'smp'
       queue = 'short.q,all.q'
     }
 
     executor {
       queueSize = 64
     }
   }
 }

